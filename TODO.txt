Punkt 8:

1. Ustalenie iloœci fal dla rozgrywkii
2. Ustalenie iloœci przeciwników na dan¹ falê, mo¿emy to wyraziæ jakimœ wzorkiem ¿eby siê nie mêczyæ, np. n = 10*(nr fali) czy coœ takiego, najlepiej w formie jakiejœ zmiennej w klasie, ¿eby mo¿na by³o t¹ wartoœæ ³atwo zmieniæ ( w jednym miejscu )
3. Uruchomienie rozgrywki ( mo¿emy za³o¿yæ, ze istnieje klasa GameHandler, któr¹ stworzê, wywo³ujemy metodê StartGame(iloœæ przeciwników do stworzenia)
4. Klasa powinna mieæ metodê, która pozwoli nam ustaliæ koniec gry - wywo³a j¹ GameHandler kiedy iloœæ przeciwników bêdzie równa 0. Metoda ta powinna wyœwietliæ na ekranie komunikat ( np. sprite'a z napisem "wololo koniec" w formie jakiegoœ obrazka or samfing na œrodku ekranu). Tak sobie myœlê, ¿e wygodnie by³oby tutaj zawo³aæ aktualizacjê statystyk z punktu 9, wiêc na potrzeby tego punktu mo¿esz za³o¿yæ, ¿e klasa z punktu 9 wystawia Ci metodê UpdateStatistics(bool Winner).  

Punkt 9:
1. Utworzenie pliku statystyk gracza w rozs¹dnej lokalizacji, np. lokalizacja z plikiem .exe albo coœ w tym guœcie
2. Zapis do pliku iloœci rozegranych gier, iloœci wygranych i przegranych
3. Wczytanie zawartoœci pliku do klasy przy uruchomieniu aplikacji (je¿eli istnieje)
4. Aktualizacja statystyk po zakoñczonej rozgrywce, zapisanie aktualnych danych na dysk (je¿eli istnieje nadpisaæ, inaczej utworzyæ)

Przy implementacji mo¿emy za³o¿yæ, ¿e wszystko, co jest potrzebne istnieje w aplikacji - a wiêc wystarcz¹ nam najprawdopodobniej settery i gettery + obs³uga pliku. O statusie rozgrywki dowiadujemy siê od klasy ( lub klas ) z punktu 8, a wiêc zostaje nam inkrementacja odpowiednich wartoœci i tyle